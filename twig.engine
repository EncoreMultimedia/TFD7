<?php
/*Drupal implementation of the twig template engine.
 *
 * You *need* PHP 5.2.4 or higher to use code.
 *
 * Part of the Drupal twig extension distribution
 * http://renebakx.nl/twig-for-drupal
*/

/* register autoloader system */
spl_autoload_register('twig_autoload');

/**
 * registers the .tpl.html extension for twig templates
 * @return string
 */
function twig_extension() {
    return ".tpl.html";
}


/**
 * Implementation of hook_init()
 *
 * note get's called at rebuild registry!
 * 
 * include the current theme template.php file.
 * @param <object> $theme
 */
function twig_init($theme) {
    if (file_exists($file =  dirname($theme->filename) .'/template.php')) {
        require_once $file;
    }
}

/**
 * Implementation of hook_theme()
 *
 * Registers both twig and php_template functions and templates
 * which is needed to perform the fallback to .tpl.php
 *
 * @link http://api.drupal.org/api/function/hook_theme/6
 * @return <array>
 */
function twig_theme($existing, $type, $theme, $path) {
    $twigFunctions = drupal_find_theme_functions($existing, array('twig', $theme));
    $twigTemplates = drupal_find_theme_templates($existing, twig_extension(), $path);
    return array_merge($twigFunctions,$twigTemplates);
}

/**
 * Implementation of hook ENGINE_render_template
 *
 * Checks if the twig template is available or else do the fallback to
 * the php_template drupal engine
 *
 * @param <string> $template template filename
 * @param <array> $variables variables to be assigned to template
 * @return <string> rendered template
 */
function twig_render_template($template,$variables = array()) {
    if (file_exists($template)) {
        return twig_render($template,$variables);
    }
    else {
        return twig_render_default_template($template,$variables);
    }
}

/**
 * Discovers the needed .tpl.php to render, and renders it in php_template using
 * variables
 *
 * @param <type> $template
 * @param <type> $variables
 * @return <type>
 */
function twig_render_default_template($template,$variables) {
    $paths = twig_get_discovered_templates();
    $chunks = array_reverse(explode("/",$template));
    $variables["template_files"][] = str_replace(twig_extension(),"",$chunks[0]);
    $variables["template_files"] = array_reverse($variables["template_files"]);
    $template = drupal_discover_template($paths, $variables["template_files"], '.tpl.php');
    drupal_set_message(sprintf('Twig fallback to tpl.php for template "%s"',$template),'warning');
    return theme_render_template($template,$variables);
}

/**
 * Builds and caches the default template locations list
 * needed for the fallback rendering, cause you can not
 * loop things trough drupal twice
 *
 * @return <array>
 */
function twig_get_discovered_templates() {
    $tplFolders = cache_get('twig_tpl_paths');
    if ($tplFolders == 0) {
        $currentPath = drupal_get_path('theme', variable_get('theme_default','null'));
        $paths[] = $currentPath;
        $tplHooks = theme_get_registry();
        foreach($tplHooks as $hook => $data) {
            $paths = array_merge($paths,$data["theme paths"]);
        }
        $tempFolders = array_unique($paths);
        cache_set('twig_tpl_paths', $tempFolders, 'cache',CACHE_PERMANENT);
        $return = $tempFolders;
    } else {
        $return = $tplFolders->data;
    }
    return $return;
}
/**
 * init or set the cache for twig to store compiled templates
 * @return <string> path to twig cache
 */
function twig_init_cache($clear=false) {
    $path = file_directory_path()."/twig_cache";
    if (file_check_directory($path, TRUE)) {
        if ($clear) {
            foreach(glob($path.'/*.*') as $file) {
                unlink($file);
            }
        }
    }
    return $path;
}
/**
 * Renders template using twig
 *
 * @param <string> $template
 * @param <arrray> $variables
 * @return <string>
 */
function twig_render($template,$variables) {
    try {
        $twig = twig_get_instance();
        $template = $twig->loadTemplate($template);
        $content = $template->render($variables);
    } catch (Exception $e) {
        drupal_set_message($e->getMessage(),'error');
        echo '<pre>';
        echo $e->getMessage() .' in ' .$e->getFile();
        echo '<hr>';
        echo $e->getTraceAsString();
        echo '</pre>';

    }
    return $content;
}
/*
 * Returns a singleton version of the twig template enginge\
 * @return <object> Twig_Environment
*/
function twig_get_instance() {
    static $twig_engine;
    if (!is_object($twig_engine)) {
        $twigEnvironment = array();
        $cache = twig_init_cache(true);
        $twigEnvironment['debug'] = true;
        if ($cache) {
            $twigEnvironment['cache'] = $cache;
        }
        $loader          = new TFD_Loader_Filesystem();
        $twig_engine     = new TFD_Environment($loader,$twigEnvironment);
        $twig_engine->addExtension(new TFD_Extension());
    }
    return $twig_engine;
}

/**
 * Autoloads either TFD_ or Twig_ classes
 * engine
 *
 * @param <string> $class
 */

function twig_autoload($class) {
    $class = str_replace('_', '/', $class).'.php';
    $engine_path = null;
    if  (0 === strpos($class, 'TFD')) {
        $engine_path = drupal_get_path('theme_engine', 'twig') . '/lib/';
    }
    else if  (0 === strpos($class, 'Twig')) {
        $engine_path = drupal_get_path('theme_engine', 'twig') . '/lib/Twig/lib/';
    }
    if($engine_path && file_exists($engine_path . $class)) {
        require_once $engine_path . $class;
    }
}
